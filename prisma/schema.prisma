// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  ADMIN
  USER
  INSTRUCTOR
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

model User {
  id                    Int               @id @default(autoincrement())
  email                 String            @unique
  password              String
  firstName             String?
  lastName              String?
  emailVerified         Boolean           @default(false)
  otp                   String?
  otpExpiry             DateTime?
  phoneNumber           String?
  profilePicture        String?
  googleId              String?
  role                  USER_ROLE         @default(USER)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  // Relations
  Enrollment            Enrollment[]
  instructorEnrollments Enrollment[]      @relation("InstructorEnrollments")
  passwordHistory       PasswordHistory[]
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  price       Float
  duration    Int
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Enrollment {
  id                Int              @id @default(autoincrement())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId          Int
  instructor        User?            @relation("InstructorEnrollments", fields: [instructorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  instructorId      Int?
  status            EnrollmentStatus @default(ACTIVE)
  paymentStatus     PaymentStatus    @default(PENDING)
  paystackReference String?          @unique
  createdAt         DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt         DateTime         @updatedAt
}

model PasswordHistory {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int
  passwordHash String
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
}

model State {
  id   Int    @id @default(autoincrement())
  name String @unique

  LGAs LGA[]
}

model LGA {
  id      Int    @id @default(autoincrement())
  name    String
  state   State  @relation(fields: [stateId], references: [id])
  stateId Int
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
